<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victor&#39;s Personal Page</title>
  
  
  <link href="https://victorserranomoroder.github.io/atom.xml" rel="self"/>
  
  <link href="https://victorserranomoroder.github.io/"/>
  <updated>2025-08-10T17:52:17.376Z</updated>
  <id>https://victorserranomoroder.github.io/</id>
  
  <author>
    <name>Víctor Serrano Moroder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CudaThing</title>
    <link href="https://victorserranomoroder.github.io/article/CudaThing/"/>
    <id>https://victorserranomoroder.github.io/article/CudaThing/</id>
    <published>2025-08-10T00:00:00.000Z</published>
    <updated>2025-08-10T17:52:17.376Z</updated>
    
    
    
    
    <category term="article" scheme="https://victorserranomoroder.github.io/categories/article/"/>
    
    
    <category term="C++" scheme="https://victorserranomoroder.github.io/tags/C/"/>
    
    <category term="CUDA" scheme="https://victorserranomoroder.github.io/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>1 Fundamental types and operators</title>
    <link href="https://victorserranomoroder.github.io/cpp-course-basic/1.1-Fundamental-types-and-operators/"/>
    <id>https://victorserranomoroder.github.io/cpp-course-basic/1.1-Fundamental-types-and-operators/</id>
    <published>2025-08-09T18:31:09.000Z</published>
    <updated>2025-08-10T18:06:03.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Primitive-types"><a href="#Primitive-types" class="headerlink" title="Primitive types"></a>Primitive types</h1><p>Primitive types are simple types that represent data in its simplest form, all primitive types are <em>trivially copiable</em> and do not offer any functionality besides storing information in a meaningful way.</p><span id="more"></span><p>Primitives represent both meaning (a character, a number…) and a specific size (amount of bits that are needed to store them in memory). Some primitive data types are:</p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p>Integer data types represent whole numbers without a fractional or decimal part. They can be signed (positive, negative, or zero) or unsigned (only positive or zero).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 32 bits</span></span><br><span class="line"><span class="type">int</span> my_int = <span class="number">-42</span>; <span class="comment">// Can store negatives</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> my_uint= <span class="number">42</span>;</span><br><span class="line"><span class="comment">// 64 bits</span></span><br><span class="line"><span class="type">long</span> my_long = <span class="number">-1024</span>; <span class="comment">// Can store negatives</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><p>Character data types represent individual characters from a character set, like ASCII or Unicode. In C++, <code>char</code> is commonly used to represent characters.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> my_char = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">char</span> my_char = <span class="number">42</span>; <span class="comment">// Also valid! Chars are 8 bit numbers interpreted as ASCII</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>Boolean data types represent binary values, typically used for true (1) or false (0) conditions. In C++, <code>bool</code> is used for Boolean data.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> my_true_bool = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> my_false_bool = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h3><p>Floating-point data types represent numbers with a fractional part. In C++, <code>float</code> is a single-precision floating-point type.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> my_float = <span class="number">42</span>f;</span><br></pre></td></tr></table></figure><h3 id="Double-Floating-Point"><a href="#Double-Floating-Point" class="headerlink" title="Double Floating Point"></a>Double Floating Point</h3><p>Double-precision floating-point data types are used to represent numbers with a larger range and higher precision compared to ‘float’. In C++, ‘double’ is commonly used.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> my_double = <span class="number">3.141592653589793</span>;</span><br></pre></td></tr></table></figure><h3 id="Valueless-or-Void"><a href="#Valueless-or-Void" class="headerlink" title="Valueless or Void"></a>Valueless or Void</h3><p>The <code>void</code> data type in C++ is used to indicate that a function does not return any value or to declare generic pointers that do not point to a specific data type.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123; <span class="comment">// This function does not return a value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* genericPointer; <span class="comment">//We&#x27;ll get to that in a while...</span></span><br></pre></td></tr></table></figure><h2 id="Modern-primitive-types"><a href="#Modern-primitive-types" class="headerlink" title="Modern primitive types"></a>Modern primitive types</h2><p>More primitive types are available for improved precision and clarity, most of these are available by including for example <code>&lt;cstdint&gt;</code>, these will import types like <code>uint32_t</code>.  </p><p>These types are usually preferred than the standard primitives as they offer better readability. For example, lets say we want to store an 8 bit value (like a single channel RGB value):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> my_red_channel_value = <span class="number">125</span>;</span><br></pre></td></tr></table></figure><p>The only primitive type that stores an 8 bit value is a <code>char</code>, we are matching its size but its meaning can (and will) be quite confusing for another reader, for this situations we can use <code>uint8_t</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="type">uint8_t</span> my_red_channel_value = <span class="number">125</span>;</span><br></pre></td></tr></table></figure><p>Under the hood it will behave the same but we have greatly improved the readability of the code.</p><h1 id="Variable-declaration-and-use-of-operators"><a href="#Variable-declaration-and-use-of-operators" class="headerlink" title="Variable declaration and use of operators"></a>Variable declaration and use of operators</h1><p>Variable declaration in C++ is quite straightforward:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> my_int, my_other_int;</span><br><span class="line"><span class="type">float</span> my_float, my_other_float;</span><br><span class="line"><span class="type">bool</span> my_bool;</span><br></pre></td></tr></table></figure><p>It can also be said with operator usage, C++ offers a rather large collection of operators that can be used by objects, and primitives, this is no different than calling a function, but in a more readable way.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">12</span>, b=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> result = a + b; <span class="comment">// result = 42</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_sum_function</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> other_result = <span class="built_in">my_sum_function</span>(a,b); <span class="comment">// result = 42 </span></span><br></pre></td></tr></table></figure><h1 id="Type-inference-with-auto"><a href="#Type-inference-with-auto" class="headerlink" title="Type inference with auto"></a>Type inference with auto</h1><p>Type inference is a feature usually seen in more high-level languages like Python and javascript. Although C++ is a static language that doesn’t mean that we cannot use type inference in some situations to avoid verbose code. Let’s see an example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// This is a common case when dealing with iterators</span></span><br><span class="line">std::list&lt;MyLovelyObject&gt;::iterator it = my_list.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Most would just prefer...</span></span><br><span class="line"><span class="keyword">auto</span> it = my_list.<span class="built_in">begin</span>();</span><br></pre></td></tr></table></figure><p>Be aware that type inference in C++ has its limitations, <code>auto</code> needs to receive data at the moment of declaration:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This won&#x27;t work</span></span><br><span class="line"><span class="keyword">auto</span> my_type;</span><br><span class="line"></span><br><span class="line">my_type = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Primitive-types&quot;&gt;&lt;a href=&quot;#Primitive-types&quot; class=&quot;headerlink&quot; title=&quot;Primitive types&quot;&gt;&lt;/a&gt;Primitive types&lt;/h1&gt;&lt;p&gt;Primitive types are simple types that represent data in its simplest form, all primitive types are &lt;em&gt;trivially copiable&lt;/em&gt; and do not offer any functionality besides storing information in a meaningful way.&lt;/p&gt;</summary>
    
    
    
    <category term="cpp-course-basic" scheme="https://victorserranomoroder.github.io/categories/cpp-course-basic/"/>
    
    
    <category term="C++" scheme="https://victorserranomoroder.github.io/tags/C/"/>
    
  </entry>
  
</feed>
