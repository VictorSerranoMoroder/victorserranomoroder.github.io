{"posts":[{"title":"1 Fundamental types and operators","text":"Primitive typesPrimitive types are simple types that represent data in its simplest form, all primitive types are trivially copiable and do not offer any functionality besides storing information in a meaningful way. Primitives represent both meaning (a character, a number…) and a specific size (amount of bits that are needed to store them in memory). Some primitive data types are: IntegerInteger data types represent whole numbers without a fractional or decimal part. They can be signed (positive, negative, or zero) or unsigned (only positive or zero). 123456// 32 bitsint my_int = -42; // Can store negativesunsigned int my_uint= 42;// 64 bitslong my_long = -1024; // Can store negativesunsigned long = 1024; CharacterCharacter data types represent individual characters from a character set, like ASCII or Unicode. In C++, char is commonly used to represent characters. 12char my_char = 'c';char my_char = 42; // Also valid! Chars are 8 bit numbers interpreted as ASCII BooleanBoolean data types represent binary values, typically used for true (1) or false (0) conditions. In C++, bool is used for Boolean data. 12bool my_true_bool = true;bool my_false_bool = false; Floating PointFloating-point data types represent numbers with a fractional part. In C++, float is a single-precision floating-point type. 1float my_float = 42f; Double Floating PointDouble-precision floating-point data types are used to represent numbers with a larger range and higher precision compared to ‘float’. In C++, ‘double’ is commonly used. 1double my_double = 3.141592653589793; Valueless or VoidThe void data type in C++ is used to indicate that a function does not return any value or to declare generic pointers that do not point to a specific data type. 123void myFunction() { // This function does not return a value}void* genericPointer; //We'll get to that in a while... Modern primitive typesMore primitive types are available for improved precision and clarity, most of these are available by including for example &lt;cstdint&gt;, these will import types like uint32_t. These types are usually preferred than the standard primitives as they offer better readability. For example, lets say we want to store an 8 bit value (like a single channel RGB value): 1char my_red_channel_value = 125; The only primitive type that stores an 8 bit value is a char, we are matching its size but its meaning can (and will) be quite confusing for another reader, for this situations we can use uint8_t: 1std::uint8_t my_red_channel_value = 125; Under the hood it will behave the same but we have greatly improved the readability of the code. Variable declaration and use of operatorsVariable declaration in C++ is quite straightforward: 123int my_int, my_other_int;float my_float, my_other_float;bool my_bool; It can also be said with operator usage, C++ offers a rather large collection of operators that can be used by objects, and primitives, this is no different than calling a function, but in a more readable way. 123456789int a = 12, b=30;int result = a + b; // result = 42int my_sum_function(int a, int b){ return a+b;}int other_result = my_sum_function(a,b); // result = 42 Type inference with autoType inference is a feature usually seen in more high-level languages like Python and javascript. Although C++ is a static language that doesn’t mean that we cannot use type inference in some situations to avoid verbose code. Let’s see an example: 12345/// This is a common case when dealing with iteratorsstd::list&lt;MyLovelyObject&gt;::iterator it = my_list.begin();// Most would just prefer...auto it = my_list.begin(); Be aware that type inference in C++ has its limitations, auto needs to receive data at the moment of declaration: 1234// This won't workauto my_type;my_type = 42;","link":"/cpp-course-basic/1.1-Fundamental-types-and-operators/"},{"title":"CudaThing","text":"","link":"/article/CudaThing/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"CUDA","slug":"CUDA","link":"/tags/CUDA/"}],"categories":[{"name":"cpp-course-basic","slug":"cpp-course-basic","link":"/categories/cpp-course-basic/"},{"name":"article","slug":"article","link":"/categories/article/"}],"pages":[{"title":"Home","text":"Hi, I’m VíctorC++ Software Developer About Me | Projects","link":"/index.html"},{"title":"about","text":"I am Victor","link":"/about/index.html"},{"title":"Curriculum Vitae","text":"CareerOrbital Critical Systems (October 2022 - Now)Qt/C++ Software Developer Indra Sistemas (September 2020 - September 2022)Ada/C Junior Software Developer d4bSolutions (March 2020 - June 2020)C/AL Junior Software Developer","link":"/curriculum/index.html"},{"title":"C++ Course","text":"First Lesson","link":"/cpp-course/index.html"}]}